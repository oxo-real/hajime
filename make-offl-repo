#! /usr/bin/env sh

###                  _                     __  __ _
###  _ __ ___   __ _| | _____        ___  / _|/ _| |      _ __ ___ _ __   ___
### | '_ ` _ \ / _` | |/ / _ \_____ / _ \| |_| |_| |_____| '__/ _ \ '_ \ / _ \
### | | | | | | (_| |   <  __/_____| (_) |  _|  _| |_____| | |  __/ |_) | (_) |
### |_| |_| |_|\__,_|_|\_\___|      \___/|_| |_| |_|     |_|  \___| .__/ \___/
###                                                               |_|
###
###  # # # # # #
###       #
###  # # # # # #
###

: '
make-offl-repo
make offline package repository for hajime packages
copyright (c) 2021 - 2025  |  oxo

GNU GPLv3 GENERAL PUBLIC LICENSE
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.
https://www.gnu.org/licenses/gpl-3.0.txt

@oxo@qoto.org


# description

# dependencies
  archlinux installation
  REPO

# usage
  make-offl-repo $dst

# example
  n/a

# '


#set -o errexit
#set -o nounset
set -o pipefail

# initial definitions

## script
script_name='copy-packages.sh'
developer='oxo'
license='gplv3'
initial_release='2021'

## hardcoded variables
db_name='offline'
src_foreign="$XDG_CACHE_HOME/yay"
src_native='/var/cache/pacman/pkg'
#     vcpp='/var/cache/pacman/pkg'
pkgs_hajime="$HOME/c/git/code/hajime/pkgs-hajime-$(id -u $USER)"
pkgs_real_paths="$HOME/c/git/code/hajime/pkgs-real-paths-$(id -u $USER)"
pkgs_copy="$HOME/c/git/code/hajime/pkgs-copy-$(id -u $USER)"
pkgs_deps="$HOME/c/git/code/hajime/pkgs-deps-$(id -u $USER)"
pkgs_cache_ls_n="$XDG_CACHE_HOME/temp/pkgs-cache-ls-n-$(id -u $USER)"
pkgs_cache_ls_f="$XDG_CACHE_HOME/temp/pkgs-cache-ls-f-$(id -u $USER)"
pkgs_to_copy="$XDG_CACHE_HOME/temp/pkgs-to-copy-$(id -u $USER)"
pkgs_to_repo="$XDG_CACHE_HOME/temp/pkgs-to-repo-$(id -u $USER)"
pkgs_to_repo_err="$XDG_CACHE_HOME/temp/pkgs-to-repo-$(id -u $USER)-err"
pkgs_to_repo_res="$XDG_CACHE_HOME/temp/pkgs-to-repo-$(id -u $USER)-res"
file_packages="$HOME/c/git/code/hajime/install-packages.sh"

#--------------------------------


sourcing ()
{
    ## custom packages
    [[ -f "$file_packages" ]] && source "$file_packages"
}


args="$@"
getargs ()
{
    while true; do

	case $1 in

	    '' )
		printf 'error: dst\n'
		exit 4
		;;

	    * )
		dst="$1"
		return
		;;

	esac

    done
}


remove_files ()
{
    [[ -f "$pkgs_copy" ]] && rm -rf "$pkgs_copy"
    [[ -f "$pkgs_deps" ]] && rm -rf "$pkgs_deps"
    [[ -f "$pkgs_hajime" ]] && rm -rf "$pkgs_hajime"
    [[ -f "$pkgs_real_paths" ]] && rm -rf "$pkgs_real_paths"
}


create_pkgs_hajime ()
{
    ## sourced from file_packages
    pkgs_hajime_arr=(
	"${base_pkgs[@]}"
	"${conf_pkgs[@]}"
	"${post_pkgs[@]}"
	"${apps_pkgs[@]}"
	"${fgn_pkgs[@]}"
    )

    ## write pkgs_hajime (pkgs-hajime-1000)
    printf '%s\n' "${pkgs_hajime_arr[@]}" | sed '/^\s*$/d' | sort > "$pkgs_hajime"
}


create_pkgs_real_paths ()
{
    while read -r pkg; do
	## loop through pkgs_hajime file

	[[ -z "$pkg" ]] && continue

	pkg_path "$pkg"

	## add line to real_paths file (package)
	write_pkg_real_path "$pkg_name" "$pkg_version"

	## dump all dependencies for package in pkgs_deps
	get_pkg_deps "$pkg"

	printf '%s\n' "$pkg_deps" >> "$pkgs_deps"

    done < "$pkgs_hajime"

    ## create unique dependencies list
    optimize_pkgs_deps

    while read -r dep; do
	## loop through pkgs_deps file

	[[ -z "$dep" ]] && continue

	pkg_path "$dep"

	## add line to real_paths file (dependency)
	write_pkg_real_path "$pkg_name" "$pkg_version"

    done < "$pkgs_deps"


}


write_pkg_real_path ()
{
    pkg_name=$1
    pkg_version=$2

    printf '%s\n' "$pkg_real_path" >> "$pkgs_real_paths"
}


pkg_path ()
{
    pkg="$1"

    pmn_Q=$(pacman -Q "$pkg")
    pkg_name=${pmn_Q% *}
    pkg_version=${pmn_Q##* }

    if pacman -Qn "$pkg_name"; then
	## native package

	## grep prevent i.e. emacs libgccjit
	pkg_real_path=$(pacman -S --print "$pkg_name" | grep "$pkg_name")
	#pkg_real_path=$(pacman -S --print "$pkg_name")

    elif pacman -Qm "$pkg_name"; then
	## foreign package

	## fd no-ignore-vcs; some packages have * in their .gitignore
	pkg_real_path=$(fd --type file --no-ignore-vcs "$pkg_name"-"$pkg_version" "$src_foreign"/"$pkg_name")

    fi

    pkg_dir="${pkg_real_path%/*}"
    pkg_file_name="${pkg_real_path##*/}"
}


get_pkg_deps ()
{
    pkg_deps=''
    pkg="$1"

    ## tail first line of pactree is queried package
    ## sed remove >= which is sometimes returned from pactree
    # | sed 's/>.*$//'
    pkg_deps=$(pactree --linear --unique "$pkg" | tail -n +2 | sort)
    #pkg_main_deps=$(pactree --linear --depth 1 $pkg_main | tail -n +2 | sort)
}


optimize_pkgs_deps ()
{
    ## tempo var
    pkgs_deps_tmp=$(cat "$pkgs_deps")

    printf '%s\n' "$pkgs_deps_tmp" \
	| sort --numeric-sort \
	| uniq \
	      > "$pkgs_deps"
}


optimize_real_paths ()
{
    sort --numeric-sort "$pkgs_real_paths" \
	| uniq \
	| grep ^file:/// \
	       > "$pkgs_copy"
}


create_repo_db ()
{
    repo-add --new --remove --include-sigs $dst/$db_name.db.tar.zst $dst/$p_basename
}


beep()
{
    pw-play $XDG_DATA_HOME/a/media/audio/sound/airbus/da.ogg
}


main ()
{
    sourcing
    getargs $args
    remove_files
    create_pkgs_hajime
    create_pkgs_real_paths
    optimize_real_paths
    beep
}

main
